module VideoSplitter
  
  # <tt>VideoSplitter::AfterSplit</tt> A class generated by video_splitter generator
  # that menage the after split callbacks: after_each_split and after_all_splits.
  # It defines methods optionally passed to render_video_splitter helper:
  # render_video_splitter({
  #    :after_each_split => :do_something_after_each_split,
  #    :after_all_splits => :do_something_after_all_splits
  # })
  class AfterSplit
    
    def initialize(options = HashWithIndifferentAccess.new)
      @options = options
    end

    # The after_each_split callback can access attributes stored in the @options hash:
    # - output_filename: only the new splitted file name, without extension
    # - output_format: the new splitted file extension
    # - timecode_input: the original file inpoint from which the cut was done
    # - timecode_output: the original file outpoint to which the cut was done
    # - video[:file_path]: the original file path
    # - length: length of the new splitted video in seconds
    def do_something_after_each_split
      puts "> AFTER EACH SPLIT: #{@options.inspect}"
    end

    # The after all splits callback can access attributes stored in the @options hash.
    # It provides informations about the whole splitting process, so you'll have two arrays:
    # - successful: successfuly splitted files (one or many)
    # - errors: unsuccessfuly splitted files (one or many)
    def do_something_after_all_splits
      puts "> AFTER ALL SPLITS: #{@options.inspect}"
    end

  end
end

